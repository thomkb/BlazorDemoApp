@using Serilog
@using Models.WeatherDisplayData

@inject IConfiguration Config
@inject Serilog.ILogger Logger
@page "/weather"
@rendermode InteractiveAuto


<h1 class="container-md my-3">Weather from WeatherAPI</h1>
<p class="container-md my-5">
    <strong>Enter a zip code and click the button to get the current weather conditions:</strong>  <input name="zip_code" />
    <br />
    <button class="btn btn-outline-primary" @onclick="GetWeatherAsync">Get Weather</button>
</p>
<p class ="container-sm my-3">
    <strong>Choose the unit of measurement:</strong>
    <InputRadioGroup class="btn btn-group" @bind-Value="isMetric">
        <InputRadio id="metricTrue" Value="true" /> Metric (Celsius, Kilometers)
        <InputRadio id="metricFalse" Value="false" /> US (Fahrenheit, Miles)
    </InputRadioGroup>
</p>

@if (isFirstTime != true)
{    
    @if (isGoodWeatherCall && weatherData?.City != null)
    {
        <div class="container-sm my-3">
            <strong>Current weather condition for @weatherData.City, @weatherData.State, @weatherData.Country  @zipCode</strong>           
            <img src="@weatherData.IconUrl" alt="Weather Icon" class="position-relative end-150" />          
            <br/>
            <p class="container-sm">
                <strong>Description:</strong> @weatherData.WeatherDescription
                <br />
                <strong>Precipitation:</strong> @weatherData.Precipitation
                <br />
                <strong>Temperature:</strong> @weatherData.Temperature, but it feels like @weatherData.WindChill
                <br />
                <strong>Wind Chill:</strong> @weatherData.WindChill
                <br />
                <strong>Heat Index:</strong> @weatherData.HeatIndex
                <br />
                <strong>Wind:</strong> @weatherData.Wind, with gusts up to @weatherData.WindGust.
                <br />
                <strong>Wind Direction:</strong> @weatherData.WindDirection (@weatherData.WindDegree)
                <br />
                <strong>Humidity:</strong> @weatherData.Humidity
                <br />
                <strong>Barometric Pressure:</strong> @weatherData.Pressure
                <br />
                <strong>Dewpoint:</strong> @weatherData.Dewpoint
                <br />
                <strong>Visibility:</strong> @weatherData.Visibility
                <br />
                <strong>UV Index:</strong> @weatherData.UvIndex
            </p>
        </div> 
        <p class="container-sm my-3">
            <strong>Last updated:</strong> @weatherData.TimeUpdated
            <br />
            <strong>Local Time:</strong> @weatherData.LocalTime
        </p>
        <p class="container-sm my-3">
            <a href="https://www.weatherapi.com/" target="_blank">Weather data provided by WeatherAPI.com</a>
        </p>
    }
    else
    {
        <p class="container-sm my-3">
            <strong>Cannot retrieve weather information for '@zipCode'.</strong> 
        </p>
    }
}

@code {
    private bool _isMetricValue = true;
    private string? apiKey;
    private string? ApiBaseUrl;  
    private string? zipCode;
    private bool isFirstTime = true;
    private bool isGoodWeatherCall;
    WeatherDisplayData? weatherData;
    private bool isMetric
    { 
        get => _isMetricValue;

        set
        {
            if (_isMetricValue != value)
            {
                _isMetricValue = value;
                _ = OnUnitsChangedAsync();
            }
        }
    }

    // Read the API key and base URL from the appsettings.json file on initialization of the component
    protected override void OnInitialized()
    {
        apiKey = Config["WeatherApiSettings:WeatherApiKey"];
        ApiBaseUrl = Config["WeatherApiSettings:WeatherApiUrl"];
    }

    // Inject the JSRuntime service; needed to read the zip code from the input field on the page
    [Inject] private IJSRuntime? JSRuntime { get; set; }

    private async Task GetWeatherAsync()
    {
        WeatherDataReader? weatherDataReader = new WeatherDataReader();
        zipCode = await JSRuntime.InvokeAsync<string>("eval", "document.querySelector('input[name=zip_code]').value");
        isMetric = await JSRuntime.InvokeAsync<bool>("eval", "document.querySelector('input[name=isMetric]').checked");
        var apiUrl = $"{ApiBaseUrl}?key={apiKey}&q={zipCode}";

        if (weatherDataReader != null)
        {
            weatherData = await weatherDataReader.ReadFromApi(apiUrl, isMetric, Logger);
        }

        isGoodWeatherCall = weatherData != null;
        isFirstTime = false;
    }

    private async Task OnUnitsChangedAsync()
    {
        await GetWeatherAsync();
        StateHasChanged();
    }
}